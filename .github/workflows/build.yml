name: Test and package

on:
  push:
  pull_request:

jobs:
  test-linux:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        fft:
        - avfft
        - fftw3
        - fftw3f
        - kissfft
    env:
      FFT_LIB: ${{ matrix.fft }}
    steps:
    - uses: actions/checkout@v1
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install cmake libavcodec-dev libavformat-dev libavutil-dev libavresample-dev libfftw3-dev
    - name: Test with ${{ env.FFT_LIB }}
      run: |
        mkdir build.test.$FFT_LIB
        cd build.test.$FFT_LIB
        cmake -DCMAKE_BUILD_TYPE=Release -DFFT_LIB=$FFT_LIB -DBUILD_TESTS=ON -DBUILD_TOOLS=OFF ..
        make VERBOSE=1
        make check VERBOSE=1

  test-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        fft:
        - vdsp
        - kissfft
    env:
      FFT_LIB: ${{ matrix.fft }}
    steps:
    - uses: actions/checkout@v1
    - name: Test with ${{ env.FFT_LIB }}
      run: |
        mkdir build.test.$FFT_LIB
        cd build.test.$FFT_LIB
        cmake -DCMAKE_BUILD_TYPE=Release -DFFT_LIB=$FFT_LIB -DBUILD_TESTS=ON -DBUILD_TOOLS=OFF -DCMAKE_CXX_FLAGS='-stdlib=libc++' ..
        make VERBOSE=1
        make check VERBOSE=1

  package-linux:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        arch:
        - x86_64
    env:
      OS: linux
      ARCH: ${{ matrix.arch }}
    steps:
    - uses: actions/checkout@v1
    - name: Build
      run: ./package/build.sh
    - name: Test
      run: ./artifacts/bin/fpcalc -raw tests/data/test.mp3 | diff -u - tests/data/test.mp3.fpcalc.out
    - name: Archive artifacts
      uses: actions/upload-artifact@v2
      with:
        name: chromaprint-${{ env.OS }}-${{ env.ARCH }}
        path: artifacts/

  package-windows:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        arch:
        - x86_64
    env:
      OS: windows
      ARCH: ${{ matrix.arch }}
    steps:
    - uses: actions/checkout@v1
    - name: Install dependencies
      run: |
        sudo apt-get update -y && \
        sudo apt-get install -y mingw-w64
    - name: Build
      run: ./package/build.sh
    - name: Archive artifacts
      uses: actions/upload-artifact@v2
      with:
        name: chromaprint-${{ env.OS }}-${{ env.ARCH }}
        path: artifacts/

  package-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch:
        - x86_64
        - arm64
    env:
      OS: macos
      ARCH: ${{ matrix.arch }}
    steps:
    - uses: actions/checkout@v1
    - name: Build
      run: ./package/build.sh
    - name: Test
      run: ./artifacts/bin/fpcalc -raw tests/data/test.mp3 | diff -u - tests/data/test.mp3.fpcalc.out
      if: ${{ matrix.arch == 'x86_64' }}
    - name: Archive artifacts
      uses: actions/upload-artifact@v2
      with:
        name: chromaprint-${{ env.OS }}-${{ env.ARCH }}
        path: artifacts/

  package-macos-universal:
    runs-on: macos-latest
    needs: package-macos
    steps:
    - uses: actions/checkout@v1
    - uses: actions/download-artifact@v2
      with:
        name: chromaprint-macos-x86_64
        path: single-arch/x86_64
    - uses: actions/download-artifact@v2
      with:
        name: chromaprint-macos-arm64
        path: single-arch/arm64
    - name: Create universal binary
      run: |
        mkdir -p artifacts/bin
        lipo single-arch/*/bin/fpcalc -create -output artifacts/bin/fpcalc
        lipo -info artifacts/bin/fpcalc
        chmod +x artifacts/bin/fpcalc
    - name: Test
      run: ./artifacts/bin/fpcalc -raw tests/data/test.mp3 | diff -u - tests/data/test.mp3.fpcalc.out
    - name: Archive artifacts
      uses: actions/upload-artifact@v2
      with:
        name: chromaprint-macos-universal
        path: artifacts/

        #
        #  package-windows:
        #    runs-on: ubuntu-latest
        #    strategy:
        #      matrix:
        #        arch:
        #        - x86_64
        #    env:
        #      OS: windows
        #      ARCH: ${{ matrix.arch }}
        #    steps:
        #    - uses: actions/checkout@v1
        #    - name: Install dependencies
        #      run: |
        #        sudo apt-get update -y && \
        #        sudo apt-get install -y mingw-w64
        #    - name: Build
        #      run: |
        #        export BRANCH=${GITHUB_REF##*/}
        #        ./package/build.sh
        #    - name: Archive artifacts
        #      uses: actions/upload-artifact@v1
        #      with:
        #        name: chromaprint-fpcalc-${{ env.OS }}-${{ env.ARCH }}
        #        path: chromaprint-${{ env.OS }}-${{ env.ARCH }}/bin/
        #
        #  package-macos:
        #    runs-on: macos-latest
        #    env:
        #      OS: macos
        #      ARCH: x86_64
        #    steps:
        #    - uses: actions/checkout@v1
        #    - name: Build
        #      run: |
        #        export BRANCH=${GITHUB_REF##*/}
        #        ./package/build.sh
        #    - name: Archive artifacts
        #      uses: actions/upload-artifact@v1
        #      with:
        #        name: chromaprint-fpcalc-${{ env.OS }}-${{ env.ARCH }}
        #        path: chromaprint-${{ env.OS }}-${{ env.ARCH }}/bin/
        #
        #  release:
        #    runs-on: ubuntu-latest
        #    if: startsWith(github.ref, 'refs/tags/v')
        #    needs:
        #      - package
        #      - package-macos
        #    steps:
        #      - uses: actions/checkout@v1
        #      - name: Set version
        #        run: |
        #          TAG=${GITHUB_REF##*/}
        #          echo "::set-env name=TAG::$TAG"
        #          echo "::set-env name=VERSION::$(echo $TAG | sed 's/^v//')"
        #      - uses: actions/download-artifact@v1
        #        with:
        #          name: chromaprint-fpcalc-linux-x86_64
        #          path: artifacts/chromaprint-fpcalc-${{ env.VERSION }}-linux-x86_64/
        #      - uses: actions/download-artifact@v1
        #        with:
        #          name: chromaprint-fpcalc-linux-i686
        #          path: artifacts/chromaprint-fpcalc-${{ env.VERSION }}-linux-i686/
        #      - uses: actions/download-artifact@v1
        #        with:
        #          name: chromaprint-fpcalc-windows-x86_64
        #          path: artifacts/chromaprint-fpcalc-${{ env.VERSION }}-windows-x86_64/
        #      - uses: actions/download-artifact@v1
        #        with:
        #          name: chromaprint-fpcalc-windows-i686
        #          path: artifacts/chromaprint-fpcalc-${{ env.VERSION }}-windows-i686/
        #      - uses: actions/download-artifact@v1
        #        with:
        #          name: chromaprint-fpcalc-macos-x86_64
        #          path: artifacts/chromaprint-fpcalc-${{ env.VERSION }}-macos-x86_64/
        #      - name: Make source tarball
        #        run: |
        #          mkdir artifacts/release/
        #          git archive --format=tar.gz --prefix=chromaprint-$TAG/ $TAG > artifacts/release/chromaprint-$VERSION.tar.gz
        #      - name: Make tarballs
        #        run: |
        #          cd artifacts/
        #          dirs=$(find . -name 'chromaprint-fpcalc-*-macos-*' -o -name 'chromaprint-fpcalc-*-linux-*' -type d)
        #          for dir in $dirs
        #          do
        #            name=$(basename $dir)
        #            chmod +x $dir/fpcalc
        #            tar cvzf release/$name.tar.gz $dir
        #          done
        #      - name: Make zips
        #        run: |
        #          cd artifacts/
        #          dirs=$(find . -name 'chromaprint-fpcalc-*-windows-*' -type d)
        #          for dir in $dirs
        #          do
        #            name=$(basename $dir)
        #            zip release/$name.zip $dir/*
        #          done
        #      - name: Release
        #        uses: softprops/action-gh-release@v1
        #        with:
        #          files: artifacts/release/*
        #        env:
        #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
